<#
.SYNOPSIS
    This script is used to generate a report of all ADUser accounts which are both expired
    and have a lastlogon (not lastlogonTimestamp) date older than a specified amount.

.DESCRIPTION
    The script gathers AD account from both the Student and Employee OUs, parses them for all expired
    accounts, then finds which expired accounts have not logged in in a set amount of days.

    The lists generated by these queries are each placed inside an email and sent to a pre-defined
    set of recipients.

    This scirpt is set to run on as a Scheduled Task from Scripthost-02 on a weekly basis (Monday)

.NOTES
    Created By: Stephen Gemme
    Created On: 12/10/19

    Modified By: Stephen Gemme
    Modified On: 12-11-2019
    Modifications: Added proper output and transcript so that the script could properly run and be tracked through task sequences.

#>

# Used to send an email or output to the console.
Param (
    [Parameter(Mandatory = $false)]
    [Switch]
    $sendEmail
)

# Set email information.  For multiple Recipients, seperate the values with a comma
$HeaderFrom = 'its@wpi.edu'
$SMTPServer = 'smtp.wpi.edu'
$Subject = "WPI - Expired AD Accounts"
$Recipients = 'cdrenaud@wpi.edu','roger@wpi.edu','jpeismeier@wpi.edu','cidorr@wpi.edu','lleclerc@wpi.edu','sgemme@wpi.edu'
$global:EmailBody = ""
$messageParameters = @()
$studentList = @()
$employeeList = @()

# Set our search parameters and which fields we'd like to gather.
$fieldsToDisplay = "DisplayName","Name","SamAccountName","Department","Title","OfficePhone",
                    "TelephoneNumber","EmployeeID","EmployeeNumber","AccountExpirationDate",
                    "PasswordLastSet","PasswordExpired","PasswordNeverExpires","EmailAddress",
                    "LastLogonDate","msDS-UserPasswordExpiryTimeComputed","Created"

$studentSearch = @{
    Filter      = 'accountExpirationDate -ne "$null"'
    SearchBase  = "OU=Students,OU=Accounts,DC=admin,DC=wpi,DC=edu"
    Property    = $fieldsToDisplay
}

$employeeSearch = @{
    Filter      = 'accountExpirationDate -ne "$null"'
    SearchBase  = "OU=Employees,OU=Accounts,DC=admin,DC=wpi,DC=edu"
    Property    = $fieldsToDisplay
}

function composeMailMessage(){
    Write-Host "Composing Message..." -noNewLine

    try {
        $messageParameters = @{
            Subject = $Subject
            Body = $global:EmailBody
            From = $HeaderFrom
            To = $Recipients
            SmtpServer = $SMTPServer
            Priority = "Low"
            }

        Send-MailMessage @messageParameters -BodyAsHtml

        Write-Host -ForegroundColor GREEN "Done"
    }
    catch {
        Write-Host -ForegroundColor RED "Error Composing Mail"
    }
}

Clear-Host
Start-Transcript -Path "D:\wpi\Logs\IAM\AuditExpirations\Expired-Account-Transcript-$((Get-Date).ToString('yyyy-MM-dd')).txt"
Write-Host "Script Begin $(get-date)"

# Check that we have the correct Modules imported:
if (-not (Get-Module ActiveDirectory)) {
	Import-Module ActiveDirectory -Force
}

# Get our list of students with expired accounts and all their pertinent information.
$studentList = Get-ADUser @studentSearch |
    Where-object {((get-date $_.accountExpirationDate) -lt (Get-Date) -and ($_.Enabled -eq $true))} |
    Sort-Object SamAccountName

Write-Host -ForegroundColor GREEN $studentList.count -NoNewline
Write-Host -ForegroundColor CYAN " total Student entries."

# Get our list of employees with expired accounts and all their pertinent information.
$employeeList = Get-ADUser @employeeSearch |
    Where-object {((get-date $_.accountExpirationDate) -lt (Get-Date) -and ($_.Enabled -eq $true))} |
    Sort-Object SamAccountName

Write-Host -ForegroundColor GREEN $employeeList.count -NoNewline
Write-Host -ForegroundColor CYAN " total Employee entries."

if ($sendEmail){
    # Create an HTML version of the DataTable
    # Name	Username	Enabled	ID Number	PIDM	Department	Title	Account Expiration Date	Last Logon Date	User Type	Created
    $global:EmailBody += "<table width='100%' border='1'><tbody><tr bgcolor=#CCCCCC><td align='center'>Name</td><td align='center'>Username</td><td align='center'>Enabled</td><td align='center'>ID Number</td><td align='center'>PIDM</td><td align='center'>Department</td><td align='center'>Title</td><td align='center'>Account Expiration Date</td><td align='center'>Last Logon Date</td><td align='center'>User Type</td><td align='center'>Created</td></tr>"
    # Add our header to denote the student portion of the list.
    $count = $studentList.count
    $global:EmailBody += "<tr bgcolor=#CCCCCC><td colspan=11>Students ($count)</td></tr>"
    foreach ($user in $studentList){
        $global:EmailBody += "    <tr><td>$($user.DisplayName)</td><td>$($user.SamAccountName)</td><td>$($user.Enabled)</td><td>$($user.EmployeeID)</td><td>$($user.EmployeeNumber)</td><td>$($user.Department)</td><td>$($user.Title)</td><td>$($user.AccountExpirationDate)</td><td>$($user.LastLogonDate)</td><td align='center'>$UserType</td><td align='center'>$($user.Created)</td></tr>"
    }

    # Add a divider between types of accounts in the report.
    $count = $employeeList.count
    $global:EmailBody += "<tr bgcolor=#CCCCCC><td colspan=11>Employees ($count)</td></tr>"

    foreach ($user in $employeeList){
        $global:EmailBody += "    <tr><td>$($user.DisplayName)</td><td>$($user.SamAccountName)</td><td>$($user.Enabled)</td><td>$($user.EmployeeID)</td><td>$($user.EmployeeNumber)</td><td>$($user.Department)</td><td>$($user.Title)</td><td>$($user.AccountExpirationDate)</td><td>$($user.LastLogonDate)</td><td align='center'>$UserType</td><td align='center'>$($user.Created)</td></tr>"
    }

    # Make sure we close our table.
    $global:EmailBody+= "</table>"

    # Write the email and send it.
    composeMailMessage
}

# Write everything to the prompt and stop recording our transcript.
Write-Host -ForegroundColor CYAN "`nStudents"
$studentList | Format-Table

Write-Host -ForegroundColor CYAN "`nEmployees"
$employeeList | Format-Table

Stop-Transcript
